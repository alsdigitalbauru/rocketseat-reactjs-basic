{"version":3,"sources":["pages/Main/styles.js","components/Container/index.js","services/api.js","pages/Main/index.js","components/LoadingPage/index.js","pages/Repository/styles.js","pages/Repository/index.js","routes.js","styles/global.js","App.js","serviceWorker.js","index.js"],"names":["Form","styled","form","attrs","props","type","loading","SubmitButton","button","List","ul","Container","div","api","axios","create","baseURL","Main","state","newRepo","respositories","disableButton","onFormSubmit","e","a","preventDefault","setState","get","response","data","name","full_name","onChange","target","value","localStorage","getItem","this","JSON","parse","_","prevState","setItem","stringify","onSubmit","placeholder","disabled","map","repo","key","to","encodeURIComponent","Component","LoadingPage","Owner","header","Repository","repository","issues","loadingPage","match","repoName","decodeURIComponent","params","Promise","all","src","owner","avatar_url","title","alt","description","issue","url","user","login","Routes","path","exact","component","createGlobalStyle","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69942085.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form.attrs( props => ({\n  type: 'submit',\n  loading: props.loading,\n}))`\n  margin-top: 35px;\n  display: flex;\n\n  input {\n    flex-direction: row;\n    flex: 1;\n    font-size: 16px;\n    padding: 10px 15px;\n    border: solid 1px #eee;\n    border-radius: 4px;\n  }\n\n`;\n\nexport const SubmitButton = styled.button.attrs( props => ({\n  type: 'submit',\n}))`\n  padding: 10px 15px;\n  background-color: #7159c1;\n  color: #fff;\n  border: 0;\n  border-radius: 4px;\n  margin-left: 15px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n`;\n\nexport const List = styled.ul`\n  margin-top: 35px;\n\n  li {\n    display: flex;\n    justify-content: space-between;\n    padding: 15px 0;\n\n    & + li {\n      border-top: solid 1px #eee;\n    }\n\n    a {\n      text-decoration: none;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n  max-width: 700px;\n  background-color: #fff;\n  margin: 80px auto;\n  border-radius: 10px;\n  padding: 35px;\n  box-shadow: 0 0 14px black;\n\n  h1 {\n    display: flex;\n    align-items: center;\n\n    svg {\n      margin-right: 15px;\n    }\n  }\n`;\n\nexport default Container;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import React, { Component } from 'react';\nimport { Form, SubmitButton, List } from './styles';\nimport Container from '../../components/Container';\nimport { FaGithubAlt, FaPlus } from 'react-icons/fa';\nimport api from '../../services/api';\nimport { Link } from 'react-router-dom';\n\nexport default class Main extends Component {\n\n  state = {\n    newRepo: '',\n    respositories: [],\n    disableButton: false,\n  }\n\n  componentDidMount () {\n    const respositories = localStorage.getItem('repositories');\n\n    if(respositories) {\n      this.setState({\n        respositories: JSON.parse(respositories),\n      });\n    }\n  }\n\n  componentDidUpdate (_, prevState) {\n\n    const { respositories } = this.state;\n\n    if(prevState.respositories !== respositories) {\n      localStorage.setItem('repositories', JSON.stringify(respositories));\n    }\n  }\n\n  onFormSubmit = async e => {\n    e.preventDefault();\n\n    this.setState({\n      disableButton: true,\n    });\n\n    const { newRepo, respositories } = this.state;\n\n    const response = await api.get(`/repos/${newRepo}`);\n\n    const data = {\n      name: response.data.full_name,\n    }\n\n    this.setState({\n      respositories: [ ...respositories, data ],\n      newRepo: '',\n      disableButton: false,\n    });\n  }\n\n  onChange = e => {\n    this.setState({\n      newRepo: e.target.value,\n    });\n  }\n\n  render() {\n    const { newRepo, respositories, disableButton } = this.state;\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt /> Reposit√≥rios\n        </h1>\n\n        <Form onSubmit={this.onFormSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Adicionar Repositorios\"\n            value={newRepo}\n            onChange={this.onChange}\n          />\n\n          <SubmitButton disabled={disableButton}>\n            <FaPlus />\n          </SubmitButton>\n        </Form>\n\n        <List>\n          {respositories.map(repo=>(\n            <li key={repo.name}>\n              <span>{repo.name}</span>\n              <Link to={`/repository/${encodeURIComponent(repo.name)}`}>Detalhes</Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n\n","import styled from 'styled-components';\n\nconst LoadingPage = styled.div`\n  max-width: 360px;\n  background: #fff;\n  border-radius: 10px;\n  padding: 35px;\n  margin: 25% auto;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default LoadingPage;\n","import styled from 'styled-components';\n\nexport const Owner = styled.header`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    text-decoration: none;\n    margin-bottom: 30px;\n  }\n\n  img {\n    max-height: 160px;\n    border-radius: 50%;\n  }\n\n  h1 {\n    font-size: 26px;\n  }\n\n  p {\n    font-size: 14px;\n    margin-top: 10px;\n    color: #8c8c8c;\n  }\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n  margin-top: 35px;\n\n  li {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 15px 0;\n\n    & + li {\n      border-top: solid 1px #eee;\n    }\n\n    img {\n      max-height: 80px;\n      margin-right: 25px;\n      border-radius: 50%;\n    }\n\n    span {\n      p {\n        font-size: 14px;\n        color: #8c8c8c;\n      }\n    }\n\n  }\n\n\n`;\n","import React, { Component } from 'react';\nimport LoadingPage from '../../components/LoadingPage';\nimport api from '../../services/api';\nimport PropTypes from 'prop-types';\nimport Container from '../../components/Container';\nimport { Link } from 'react-router-dom';\n\nimport { Owner, List } from './styles';\n\nexport default class Repository extends Component {\n\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: PropTypes.string,\n      }),\n    }).isRequired,\n  }\n\n  state = {\n    repository: {},\n    issues: [],\n    loadingPage: true,\n  }\n\n  async componentDidMount () {\n    const { match } = this.props;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loadingPage: false,\n    });\n  }\n\n  render() {\n\n    const { loadingPage, repository, issues } = this.state;\n\n    if(loadingPage) {\n      return <LoadingPage>Carregando...</LoadingPage>\n    }\n\n    return (\n      <Container>\n        <Owner>\n          <Link to=\"/\">Voltar aos repositorios</Link>\n          <img src={repository.owner.avatar_url} title={repository.full_name} alt={repository.full_name} />\n          <h1>{repository.name}</h1>\n          <p>{repository.description}</p>\n        </Owner>\n        <List>\n          {issues.map(issue =>(\n            <li key={issue.url}>\n              <img src={issue.user.avatar_url} />\n              <span>\n                {issue.title}\n                <p>{issue.user.login}</p>\n              </span>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport Main from './pages/Main';\nimport Repository from './pages/Repository';\n\nexport default function Routes () {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Main} />\n        <Route path=\"/repository/:repository\" exact component={Repository} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n","import styled, { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n    min-height: 100%;\n  }\n\n  body, html, #root {\n    background-color: #7159c1;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import React from 'react';\nimport Routes from './routes';\nimport GlobalStyle from './styles/global';\n\nfunction App() {\n  return (\n    <>\n      <Routes />\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}